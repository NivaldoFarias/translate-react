name: Database Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Database action to perform"
        required: true
        type: choice
        options:
          - backup
          - restore
          - clean
          - inspect
      artifact_run_id:
        description: "Run ID to restore from (for restore action)"
        required: false
        type: string

jobs:
  database-backup:
    name: Backup Database
    runs-on: ubuntu-latest
    if: inputs.action == 'backup'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Restore current database from cache
      - name: Restore SQLite cache
        uses: actions/cache/restore@v4
        with:
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          key: sqlite-cache-${{ github.repository }}-
          restore-keys: |
            sqlite-cache-${{ github.repository }}-

      # Upload as artifact with manual trigger timestamp
      - name: Upload database backup
        uses: actions/upload-artifact@v4
        if: hashFiles('snapshots.sqlite') != ''
        with:
          name: database-backup-manual-${{ github.run_id }}
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          retention-days: 90

      - name: Summary
        run: |
          echo "## Database Backup Complete" >> $GITHUB_STEP_SUMMARY

          if [ -f snapshots.sqlite ]; then
            SIZE=$(du -h snapshots.sqlite | cut -f1)
            echo "- **Artifact Name**: database-backup-manual-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Database Size**: $SIZE" >> $GITHUB_STEP_SUMMARY
            echo "- **Retention**: 90 days" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ⚠️ No database found in cache" >> $GITHUB_STEP_SUMMARY
            echo "- **Action**: Run a translation workflow first to create the database" >> $GITHUB_STEP_SUMMARY
          fi

  database-restore:
    name: Restore Database
    runs-on: ubuntu-latest
    if: inputs.action == 'restore'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('bun.lock') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      # Download specified artifact
      - name: Download database artifact
        uses: actions/download-artifact@v4
        with:
          name: translation-database-${{ inputs.artifact_run_id }}

      # Validate database integrity
      - name: Validate database
        run: |
          if [ ! -f snapshots.sqlite ]; then
            echo "❌ Database file not found in artifact"
            exit 1
          fi

          bun run db:validate

      # Save restored database to cache
      - name: Save to cache
        uses: actions/cache/save@v4
        with:
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          key: sqlite-cache-${{ github.repository }}-restored-${{ github.run_id }}

      - name: Summary
        run: |
          echo "## Database Restore Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Run ID**: ${{ inputs.artifact_run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Cache Key**: sqlite-cache-${{ github.repository }}-restored-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

  database-clean:
    name: Clean Old Snapshots
    runs-on: ubuntu-latest
    if: inputs.action == 'clean'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('bun.lock') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      # Restore current database from cache
      - name: Restore SQLite cache
        uses: actions/cache/restore@v4
        with:
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          key: sqlite-cache-${{ github.repository }}-
          restore-keys: |
            sqlite-cache-${{ github.repository }}-

      # Create backup before cleaning
      - name: Backup before cleaning
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-before-clean-${{ github.run_id }}
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          retention-days: 30

      # Clean old snapshots (keep last 10)
      - name: Clean old snapshots
        run: bun run db:clean -- --keep 10

      # Save cleaned database to cache
      - name: Save cleaned database
        uses: actions/cache/save@v4
        with:
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          key: sqlite-cache-${{ github.repository }}-cleaned-${{ github.run_id }}

      - name: Summary
        run: |
          echo "## Database Cleanup Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup Created**: database-backup-before-clean-${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

          if [ -f snapshots.sqlite ]; then
            SIZE=$(du -h snapshots.sqlite | cut -f1)
            echo "- **New Database Size**: $SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  database-inspect:
    name: Inspect Database
    runs-on: ubuntu-latest
    if: inputs.action == 'inspect'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('bun.lock') }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      # Restore current database from cache
      - name: Restore SQLite cache
        uses: actions/cache/restore@v4
        with:
          path: |
            snapshots.sqlite
            snapshots.sqlite-journal
          key: sqlite-cache-${{ github.repository }}-
          restore-keys: |
            sqlite-cache-${{ github.repository }}-

      # Generate database report
      - name: Generate database report
        run: |
          if [ ! -f snapshots.sqlite ]; then
            echo "❌ No database found in cache"
            exit 0
          fi

          bun run db:inspect | tee database-report.txt

      # Upload report
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: database-report-${{ github.run_id }}
          path: database-report.txt
          retention-days: 30

      - name: Summary
        run: |
          echo "## Database Inspection Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat database-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
